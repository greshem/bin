#!/usr/bin/python
#coding=utf-8




import logging
import sys
sys.path.append("/root/bin/photo_md5/");

from cliff.app import App
from cliff.command import Command
from cliff.commandmanager import CommandManager
from cliff.lister import Lister
from cliff.complete import CompleteCommand

class Myapp(App):
    log = logging.getLogger(__name__)
    def __init__(self):
        command_manager = CommandManager('greshem.app')
        super(Myapp, self).__init__(
            description='sample app',
            version='0.1',
            command_manager=command_manager,
        )
        commands = {
                    'photo_upsert': do_photo_upsert_action, 
                    'photo_md5': do_photo_md5_action, 
                    'photo_bad': do_command3, 
                    "photo_search": do_photo_upsert_action,
                    'photo_import_dir': do_photo_import_dir, 
                    'photo_import_isos_dir': do_photo_import_isos_dir, 

                    }
        for k, v in commands.iteritems():
            command_manager.add_command(k, v)
        self.command_manager.add_command('complete', CompleteCommand)

    def initialize_app(self, argv):
        self.log.debug('initialize_app')
    def prepare_to_run_command(self, cmd):
        self.log.debug('prepare_to_run_command %s', cmd.__class__.__name__)
    def clean_up(self, cmd, result, err):
        self.log.debug('clean_up %s', cmd.__class__.__name__)
        if err:
            self.log.debug('got an error: %s', err)

class do_photo_upsert_action(Command):
    log = logging.getLogger(__name__)
    def get_parser(self, prog_name):
        parser = super(do_photo_upsert_action, self).get_parser(prog_name)
        parser.add_argument('--input', '-i', help='message md5 or photo file ', required=True)
        return parser

    def take_action(self, parsed_args):
        from  select_data  import upsert;
        print (parsed_args.input)
        upsert(parsed_args.input)


class do_command3(Command):
    log = logging.getLogger(__name__)
    def get_parser(self, prog_name):
        parser = super(do_command3, self).get_parser(prog_name)
        parser.add_argument('--args31', '-a', help='args31', required=False)
        parser.add_argument('--message', '-m', help='message')
        return parser

    def take_action(self, parsed_args):
        #print (parsed_args.args31, parsed_args.message)
        import os;
        print  "文件列表:file list in  /tmp/bad_photo.log ";
        os.system("cat /tmp/bad_photo.log ");


class do_photo_import_dir(Command):
    log = logging.getLogger(__name__)
    def get_parser(self, prog_name):
        parser = super(do_photo_import_dir, self).get_parser(prog_name)
        parser.add_argument('--input', '-i', help='input_dir', required=True)
        parser.add_argument('--desc', '-d', help='description', required=True)
        return parser

    def take_action(self, parsed_args):
        print (parsed_args.input)
        from import_dir import  deal_iso_mount_dir;
        import os
        if os.path.isdir(parsed_args.input):
            print "file exists";
        else:
            sys.exit("%s is not dir ");

        deal_iso_mount_dir(parsed_args.input, parsed_args.desc );
            

#do_photo_import_isos_dir, 
class do_photo_import_isos_dir(Command):
    log = logging.getLogger(__name__)
    def get_parser(self, prog_name):
        parser = super(do_photo_import_isos_dir, self).get_parser(prog_name)
        parser.add_argument('--input', '-i', help='input_dir', required=False)
        return parser
    def take_action(self, parsed_args):
        import glob
        import os;
        import sys, os
        for file in glob.glob("/mnt/a/sdb3/photo/*.iso"):
            if os.path.isfile(file):
                print "#File:   {0}".format(file);
                pathname = os.path.basename(file)
                print "mkdir dir";
                print 'mount {0} dir/   '.format( file );
                print "python main.py  photo_import_dir -i dir  -d %s  "%( pathname);

class do_command4(Command):
    log = logging.getLogger(__name__)
    def get_parser(self, prog_name):
        parser = super(do_command4, self).get_parser(prog_name)
        parser.add_argument('--branch', '-a', help='branch', required=True)
        parser.add_argument('--message', '-m', help='message')
        return parser
    def take_action(self, parsed_args):
        print (parsed_args.branch, parsed_args.message)


class do_photo_md5_action(Command):
    log = logging.getLogger(__name__)
    def get_parser(self, prog_name):
        parser = super(do_photo_md5_action, self).get_parser(prog_name)
        parser.add_argument('--input', '-i', help='input file ', required=True)
        return parser

    def take_action(self, parsed_args):
        from import_dir import md5_file 
        hex_str=md5_file(parsed_args.input);
        print "%s --> %s"%( parsed_args.input, hex_str);


def main(argv=sys.argv[1:]):
    myapp = Myapp()
    return myapp.run(argv)

if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))
