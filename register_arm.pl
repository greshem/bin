#!/usr/bin/perl
foreach (<DATA>)
{
	print $_;
}
__DATA__

ARM 处理器有二十七个寄存器，其中一些是在一定条件下使用的，所以一次只能使用十六个...
ARM 2 和 3 有 27 个 32 位处理器寄存器，在任何给定时间只有其中的 16 个是可见的(是哪十六个取决于处理器模式)。它们被引用为 R0-R15。 
ARM 6 和以后有 31 个 32 位处理器寄存器，在任何给定时间只有其中的 16 个是可见的。 


寄存器 0 到寄存器 7 是通用寄存器并可以用做任何目的 r0 r1 r2 r3 r4 r5 r6 f7 
		不象 80x86 处理器那样要求特定寄存器被用做栈访问，或者象 6502 那样把数学计算的结果放置到一个累加器中，ARM 处理器在寄存器使用上是高度灵活的。 
寄存器 8 到 12 是通用寄存器，但是在切换到 FIQ 模式的时候，使用它们的影子(shadow)寄存器。  r8 r9 r10 r11 r12 
寄存器 13 典型的用做 OS 栈指针，但可被用做一个通用寄存器。这是一个操作系统问题，不是一个处理器问题，  r13    SP 
		所以如果你不使用栈，只要你以后恢复它，你可以在你的代码中自由的占用(corrupt)它。每个处理器模式都有这个寄存器的影子寄存器。 
寄存器 14 专职持有返回点的地址以便于写子例程。		R14  r14
		当你执行带连接的分支的时候，把返回地址存储到 R14 中。同样在程序第一次运行的时候，把退出地址保存在 R14 中。
		R14 的所有实例必须被保存到其他寄存器中(不是实际上有效)或一个栈中。这个寄存器在各个处理器模式下都有影子寄存器。一旦已经保存了连接地址， 这个寄存器就可以用做通用寄存器了。 		
寄存器 15 是程序计数器。				#count r15 
		它除了持有指示程序当前使用的地址的二十六位数之外，还持有处理器的状态。 
r14 寄存器R14用作连接寄存器,记作lr ; 它用于保存子程序的返回地址,如果在子程序中保存了返回地址


        +------+---------------------------------------+
        | 模式 |  可获得的寄存器                        |
        +------+---------------------------------------+
        | USR  | R0             -             R14  R15 |
        +------+---------+-----------------------------+
        | FIQ  | R0 - R7 | R8_FIQ    -    R14_FIQ  R15 |
        +------+---------+----+------------------------+
        | IRQ  | R0   -   R12 | R13_IRQ - R14_IRQ  R15 |
        +------+--------------+------------------------+
        | SVC  | R0   -   R12 | R13_SVC - R14_SVC  R15 |
        +------+--------------+------------------------+
        | ABT  | R0   -   R12 | R13_ABT - R14_ABT  R15 | (ARM 6 和以后)
        +------+--------------+------------------------+
        | UND  | R0   -   R12 | R13_UND - R14_UND  R15 | (ARM 6 和以后)
        +------+---------------------------------------+

#PC ida 中的sp  
#r15  寄存器R15是程序计数器,记作PC ; 它不能用作其他用途.
#r13  寄存器R13用作数据栈指针,记做SP,在子程序中寄存器R13不能用做其他用途. 寄存器SP在进入子程序时的值和退出子程序时的值必须相等.

r0 a1 参数／结果／scratch寄存器1
r1 a2 参数／结果／scratch寄存器2
r2 a3 参数／结果／scratch寄存器3
r3 a4 参数／结果／scratch寄存器4
r4 v1 ARM状态局部变量寄存器1
r5 v2 ARM状态局部变量寄存器2
r6 v3 ARM状态局部变量寄存器3
r7 v4、wr ARM状态局部变量寄存器4、THUMB状态工作寄存器
r8 v5 ARM状态局部变量寄存器5
r9 v6、sb ARM状态局部变量寄存器6、在支持RWPI的ATPCS中为静态基址寄存器 
r10 v7、s1 ARM状态局部变量寄存器7、在支持数据栈检查的ATPCS中为数据栈限制指针
r11 v8 ARM状态局部变量寄存器8
r12 ip 子 程序内部调用的scratch寄存器
r12 寄存器R12用作scratch寄存器，记为ip(发现Linux内核中的汇编直接使用ip这个符号)
r13 sp 数据栈指针
r14 lr 连接寄存器
r15 pc 程序计数器


#The following register names are predeclared:

r0-r15 and r0-r15
a1-a4 (argument, result, or scratch registers, synonyms for r0 to r3)
v1-v8 (variable registers, r4 to r11)
sb and sb (static base, r9)
sl and sl (stack limit, r10)
fp and fp (frame pointer, r11)
ip and ip (intra-procedure-call scratch register, r12)
sp and sp (stack pointer, r13)
lr and lr (link register, r14) LR
pc and pc (program counter, r15).
