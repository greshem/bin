#!/usr/bin/perl
foreach (<DATA>)
{
	print $_;
}
__DATA__

下面主要介绍这几个常用的寄存器：通用寄存器的用途：
r0             连接寄存器, 保存上一次的 函数 堆栈的指针 
r0 在函数开始（function prologs）时使用。
r1 堆栈指针，相当于ia32架构中的esp寄存器，idapro把这个寄存器反汇编标识为sp。
r2 内容表（toc）指针，idapro把这个寄存器反汇编标识为rtoc。系统调用时，它包含系统调用号。
r3 作为第一个参数和返回值。
r4-r10 函数或系统调用开始的参数。 r4 r4 r6 r7 r8 r9 
r11 用在指针的调用和当作一些语言的环境指针。
r12 它用在异常处理和glink（动态连接器）代码。
r13 保留作为系统线程ID。
r14-r31 作为本地变量，非易失性。专用寄存器的用途：lr 链接寄存器，它用来存放函数调用结束处的返回地址。 
	r14 r15 r16 r17 r18 r19 r20 r21 r22 r23 r24 r25 r26 r27 r28 r29 r30 r31  本地变量 
ctr 计数寄存器，它用来当作循环计数器，会随特定转移操作而递减。
xer 定点异常寄存器，存放整数运算操作的进位以及溢出信息。
msr 机器状态寄存器，用来配置微处理器的设定。


cr 条件寄存器，它分成8个4位字段，cr0 cr1 cr2 cr3 cr4 cr5 cr6  cr7，它反映了某个算法操作的结果并且提供条件分支的机制。
寄存器r1、r14-r31是非易失性的，这意味着它们的值在函数调用过程保持不变。寄存器r2也算非易失性，但是只有在调用函数在调用后必须恢复它的值时才被处理。
寄存器r0、r3-r12和特殊寄存器lr、ctr、xer、fpscr是易失性的，它们的值在函数调用过程中会发生变化。
此外寄存器r0、r2、r11和r12可能会被交叉模块调用改变，所以函数在调用的时候不能采用它们的值。
条件代码寄存器字段cr0、cr1、cr5、cr6和cr7是易失性的。cr2、cr3和cr4是非易失性的，函数如果要改变它们必须保存并恢复这些字段。
在AIX上，svca指令（sc是PowerPC的助记符）用来表示系统调用，r2寄存器指定系统调用号，r3-r10寄存器是给该系统调用的参数。
	在执行系统调用指令之前有两个额外的先决条件：LR寄存器必须保存返回系统调用地址的值并且在系统调用前执行crorc cr6, cr6, cr6指令。

